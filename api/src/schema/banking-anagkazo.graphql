extend type Stream {
  tellers: [Member!]! @relationship(type: "IS_TELLER_FOR", direction: IN)
}

extend type ServiceRecord {
  tellerConfirmationTime: DateTime
  bankingConfirmer: Member
    @relationship(type: "CONFIRMED_BANKING_FOR", direction: IN)
}

extend type Member {
  isTellerForStream: [Stream!]!
    @relationship(type: "IS_TELLER_FOR", direction: OUT)
}

extend type Mutation {
  MakeStreamTeller(streamId: ID!, tellerId: ID!): Member!
  RemoveStreamTeller(streamId: ID!, tellerId: ID!): Member!
  ConfirmBanking(governorshipId: ID!): Governorship!
}

extend type Stream {
  governorshipBankingDefaultersThisWeek: [Governorship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY|HAS*1..2]-(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship

       WITH DISTINCT governorships, this
       MATCH (governorships)<-[:HAS]-(:Council)<-[:HAS]-(this)

      RETURN DISTINCT governorships
      """
    )
  governorshipBankingDefaultersThisWeekCount: Int
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY|HAS*1..2]-(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship

       WITH DISTINCT governorships, this
       MATCH (governorships)<-[:HAS]-(:Council)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT governorships)
      """
    )
}

extend type AggregateServiceRecord {
  foreignCurrency: [String]
}

extend type Governorship {
  aggregateServiceRecordForWeek(week: Int!): AggregateServiceRecord!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE_AGGREGATE]->(agg:AggregateServiceRecord)
      MATCH (agg) WHERE agg.week = $week AND agg.year = date().year

      WITH agg, this
      WITH date() as today, this, agg
      WITH  today.weekDay as theDay, today, this, agg
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this, agg
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this, agg

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY|HAS*1..2]-(this)

      WITH DISTINCT record, agg
      WITH collect(record.foreignCurrency) as list, SUM(record.income) AS income, SUM(record.attendance) AS attendance, agg

      RETURN {
        id: agg.id,
        attendance: attendance,
        income: income,
        week: agg.week,
        year: agg.year,
        foreignCurrency: list
      }
      """
    )
  banked: Boolean!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

      WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
      MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(bacentas) WHERE bacentas:Bacenta OR bacentas:ClosedBacenta

      WITH DISTINCT fellowships, this
      MATCH (fellowships)<-[:HAS]-(:Bacenta)<-[:HAS]-(this)

      WITH COUNT(DISTINCT fellowships) as bankingDefaulters
      RETURN
      CASE bankingDefaulters
      WHEN 0 THEN true
      ELSE false
      END AS banked
      """
    )

  bankedBy: Member
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
        AND (record.bankingSlip IS NOT NULL OR record.transactionStatus ='success' OR record.tellerConfirmationTime IS NOT NULL)
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(bacentas) WHERE bacentas:Bacenta OR bacentas:ClosedBacenta


      WITH DISTINCT  this, record
      MATCH (teller:Member)-[:CONFIRMED_BANKING_FOR]->(record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships)<-[:HAS]-(:Bacenta)<-[:HAS]-(this)


      RETURN DISTINCT teller
      """
    )
}
